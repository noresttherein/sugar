package net.noresttherein.sugar

import net.noresttherein.sugar.tuples.{Nat, Tuple}
import org.scalacheck.Prop._
import org.scalacheck.{Prop, Properties}
import net.noresttherein.sugar.tuples.Tuple.{><, >:<, <>}

/** The purpose of this test is mostly to verify that implicits work correctly, rather than testing simple accessors.
  * @author Marcin Mo≈õcicki marcin@moscicki.net
  */
object TupleSpec extends Properties("Tuple") {
	val t0 = <>
	val t1 = t0 >< 0
	val t2 = t1 >< 1
	val t3 = t2 >< 2 
	val t4 = t3 >< 3
	val t5 = t4 >< 4
	val t6 = t5 >< 5
	val t7 = t6 >< 6
	val t8 = t7 >< 7
	val t9 = t8 >< 8
	val t10 = t9 >< 9
	val t11 = t10 >< 10
	val t12 = t11 >< 11
	val t13 = t12 >< 12
	val t14 = t13 >< 13
	val t15 = t14 >< 14
	val t16 = t15 >< 15
	val t17 = t16 >< 16
	val t18 = t17 >< 17
	val t19 = t18 >< 18
	val t20 = t19 >< 19
	val t21 = t20 >< 20
	val t22 = t21 >< 21
	val t23 = t22 >< 22
	val t24 = t23 >< 23
	val t25 = t24 >< 24
	val elements = 0 to 24

	val tuptup = 1 >:< "2" >< 3L >< '4' 
	
	class Count(var i :Int) {
		def ++ :this.type = { i += 1; this }
		def -- :this.type = { i -= 1; this }
	}

	implicit def countToInt(i :Count) :Int = i.i



	property("apply") = {
		val T = Tuple
		T() =? t0 && T(0) =? t1 && T(0, 1) =? t2 && T(0, 1, 2) =? t3 && T(0, 1, 2, 3) =? t4 && T(0, 1, 2, 3, 4) =? t5 &&
		T(0, 1, 2, 3, 4, 5) =? t6 && T(0, 1, 2, 3, 4, 5, 6) =? t7 && T(0, 1, 2, 3, 4, 5, 6, 7) =? t8 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8) =? t9 && T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) =? t10 && T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) =? t11 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) =? t12 && T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) =? t13 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) =? t14 && T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) =? t15 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) =? t16 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) =? t17 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) =? t18 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) =? t19 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) =? t20 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) =? t21 &&
		T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) =? t22
	}




	property("><.apply(Int)") = {
		val i = new Count(-1); val t = t25
		t(1) =? i.++ && t(2) =? i.++ && t(3) =? i.++ && t(4) =? i.++ && t(5) =? i.++ && t(6) =? i.++ &&
		t(7) =? i.++ && t(8) =? i.++ && t(9) =? i.++ && t(10) =? i.++ && t(11) =? i.++ && t(12) =? i.++ && t(13) =? i.++ &&
		t(14) =? i.++ && t(15) =? i.++ && t(16) =? i.++ && t(17) =? i.++ && t(18) =? i.++ && t(19) =? i.++ && t(20) =? i.++ &&
		t(21) =? i.++ && t(22) =? i.++ && t(23) =? i.++ && t(24) =? i.++ && t(25) =? i.++ &&
		throws(classOf[IndexOutOfBoundsException]){ t(-1) } && throws(classOf[IndexOutOfBoundsException]){ t(26) } &&
		tuptup(1) =? 1 && tuptup(2) =? "2" && tuptup(3) =? 3L && tuptup(4) =? '4'
	}

	property("><.apply(Nat)") = {
		import Nat._
		val i = new Count(-1); val t = t25
		t(_1) =? i.++ && t(_2) =? i.++ && t(_3) =? i.++ && t(_4) =? i.++ && t(_5) =? i.++ && t(_6) =? i.++ &&
		t(_7) =? i.++ && t(_8) =? i.++ && t(_9) =? i.++ && t(_10) =? i.++ && t(_11) =? i.++ && t(_12) =? i.++ && t(_13) =? i.++ &&
		t(_14) =? i.++ && t(_15) =? i.++ && t(_16) =? i.++ && t(_17) =? i.++ && t(_18) =? i.++ && t(_19) =? i.++ && t(_20) =? i.++ &&
		t(_21) =? i.++ && t(_22) =? i.++ && t(++[_22]) =? i.++ && t(++[++[_22]]) =? i.++ &&
		tuptup(_1) =? 1 && tuptup(_2)  =? "2" && tuptup(_3) =? 3L && tuptup(_4) =? '4'
	}

	property("><.set") = {
		import Nat._
		(tuptup.set(_1, _10) ?= _10 >:< "2" >< 3L >< '4') && (tuptup.set(_2, _10) ?= 1 >:< _10 >< 3L >< '4') &&
			(tuptup.set(_3, _10) ?= 1 >:< "2" >< _10 >< '4') && (tuptup.set(_4, _10) ?= 1 >:< "2" >< 3L >< _10)

	}


	property("><._1") = {
		t1._1 =? 0 && t2._1 =? 0 && t3._1 =? 0 && t4._1 =? 0 && t5._1 =? 0 && t6._1 =? 0 && t7._1 =? 0 &&
		t8._1 =? 0 && t9._1 =? 0 && t10._1 =? 0 && t11._1 =? 0 && t12._1 =? 0 && t13._1 =? 0 && t14._1 =? 0 &&
		t15._1 =? 0 && t16._1 =? 0 && t17._1 =? 0 && t18._1 =? 0 && t19._1 =? 0 && t20._1 =? 0 && t21._1 =? 0 &&
		t22._1 =? 0 && t23._1 =? 0 && t24._1 =? 0 && t25._1 =? 0 && tuptup._1 =? 1
	}


	property("><._2") = {
		t2._2 =? 1 && t3._2 =? 1 && t4._2 =? 1 && t5._2 =? 1 && t6._2 =? 1 && t7._2 =? 1 &&
		t8._2 =? 1 && t9._2 =? 1 && t10._2 =? 1 && t11._2 =? 1 && t12._2 =? 1 && t13._2 =? 1 && t14._2 =? 1 &&
		t15._2 =? 1 && t16._2 =? 1 && t17._2 =? 1 && t18._2 =? 1 && t19._2 =? 1 && t20._2 =? 1 && t21._2 =? 1 &&
		t22._2 =? 1 && t23._2 =? 1 && t24._2 =? 1 && t25._2 =? 1 && tuptup._2 =? "2"
	}

	property("><._3") = {
		t3._3 =? 2 && t4._3 =? 2 && t5._3 =? 2 && t6._3 =? 2 && t7._3 =? 2 &&
		t8._3 =? 2 && t9._3 =? 2 && t10._3 =? 2 && t11._3 =? 2 && t12._3 =? 2 && t13._3 =? 2 && t14._3 =? 2 &&
		t15._3 =? 2 && t16._3 =? 2 && t17._3 =? 2 && t18._3 =? 2 && t19._3 =? 2 && t20._3 =? 2 && t21._3 =? 2 &&
		t22._3 =? 2 && t23._3 =? 2 && t24._3 =? 2 && t25._3 =? 2 && tuptup._3 =? 3L
	}

	property("><._4") = {
		t4._4 =? 3 && t5._4 =? 3 && t6._4 =? 3 && t7._4 =? 3 &&
		t8._4 =? 3 && t9._4 =? 3 && t10._4 =? 3 && t11._4 =? 3 && t12._4 =? 3 && t13._4 =? 3 && t14._4 =? 3 &&
		t15._4 =? 3 && t16._4 =? 3 && t17._4 =? 3 && t18._4 =? 3 && t19._4 =? 3 && t20._4 =? 3 && t21._4 =? 3 &&
		t22._4 =? 3 && t23._4 =? 3 && t24._4 =? 3 && t25._4 =? 3 && tuptup._4 =? '4'
	}

	property("><._5") = {
		t5._5 =? 4 && t6._5 =? 4 && t7._5 =? 4 &&
		t8._5 =? 4 && t9._5 =? 4 && t10._5 =? 4 && t11._5 =? 4 && t12._5 =? 4 && t13._5 =? 4 && t14._5 =? 4 &&
		t15._5 =? 4 && t16._5 =? 4 && t17._5 =? 4 && t18._5 =? 4 && t19._5 =? 4 && t20._5 =? 4 && t21._5 =? 4 &&
		t22._5 =? 4 && t23._5 =? 4 && t24._5 =? 4 && t25._5 =? 4
	}

	property("><._6") = {
		t6._6 =? 5 && t7._6 =? 5 &&
		t8._6 =? 5 && t9._6 =? 5 && t10._6 =? 5 && t11._6 =? 5 && t12._6 =? 5 && t13._6 =? 5 && t14._6 =? 5 &&
		t15._6 =? 5 && t16._6 =? 5 && t17._6 =? 5 && t18._6 =? 5 && t19._6 =? 5 && t20._6 =? 5 && t21._6 =? 5 &&
		t22._6 =? 5 && t23._6 =? 5 && t24._6 =? 5 && t25._6 =? 5
	}


	property("><._7") = {
		t7._7 =? 6 &&
		t8._7 =? 6 && t9._7 =? 6 && t10._7 =? 6 && t11._7 =? 6 && t12._7 =? 6 && t13._7 =? 6 && t14._7 =? 6 &&
		t15._7 =? 6 && t16._7 =? 6 && t17._7 =? 6 && t18._7 =? 6 && t19._7 =? 6 && t20._7 =? 6 && t21._7 =? 6 &&
		t22._7 =? 6 && t23._7 =? 6 && t24._7 =? 6 && t25._7 =? 6
	}

	property("><._8") = {
		t8._8 =? 7 && t9._8 =? 7 && t10._8 =? 7 && t11._8 =? 7 && t12._8 =? 7 && t13._8 =? 7 && t14._8 =? 7 &&
		t15._8 =? 7 && t16._8 =? 7 && t17._8 =? 7 && t18._8 =? 7 && t19._8 =? 7 && t20._8 =? 7 && t21._8 =? 7 &&
		t22._8 =? 7 && t23._8 =? 7 && t24._8 =? 7 && t25._8 =? 7
	}

	property("><._9") = {
		t9._9 =? 8 && t10._9 =? 8 && t11._9 =? 8 && t12._9 =? 8 && t13._9 =? 8 && t14._9 =? 8 &&
		t15._9 =? 8 && t16._9 =? 8 && t17._9 =? 8 && t18._9 =? 8 && t19._9 =? 8 && t20._9 =? 8 && t21._9 =? 8 &&
		t22._9 =? 8 && t23._9 =? 8 && t24._9 =? 8 && t25._9 =? 8
	}

	property("><._10") = {
		t10._10 =? 9 && t11._10 =? 9 && t12._10 =? 9 && t13._10 =? 9 && t14._10 =? 9 &&
		t15._10 =? 9 && t16._10 =? 9 && t17._10 =? 9 && t18._10 =? 9 && t19._10 =? 9 && t20._10 =? 9 && t21._10 =? 9 &&
		t22._10 =? 9 && t23._10 =? 9 && t24._10 =? 9 && t25._10 =? 9
	}

	property("><._11") = {
		t11._11 =? 10 && t12._11 =? 10 && t13._11 =? 10 && t14._11 =? 10 &&
		t15._11 =? 10 && t16._11 =? 10 && t17._11 =? 10 && t18._11 =? 10 && t19._11 =? 10 && t20._11 =? 10 && t21._11 =? 10 &&
		t22._11 =? 10 && t23._11 =? 10 && t24._11 =? 10 && t25._11 =? 10
	}

	property("><._12") = {
		t12._12 =? 11 && t13._12 =? 11 && t14._12 =? 11 &&
		t15._12 =? 11 && t16._12 =? 11 && t17._12 =? 11 && t18._12 =? 11 && t19._12 =? 11 && t20._12 =? 11 && t21._12 =? 11 &&
		t22._12 =? 11 && t23._12 =? 11 && t24._12 =? 11 && t25._12 =? 11
	}

	property("><._13") = {
		t13._13 =? 12 && t14._13 =? 12 &&
		t15._13 =? 12 && t16._13 =? 12 && t17._13 =? 12 && t18._13 =? 12 && t19._13 =? 12 && t20._13 =? 12 && t21._13 =? 12 &&
		t22._13 =? 12 && t23._13 =? 12 && t24._13 =? 12 && t25._13 =? 12
	}

	property("><._14") = {
		t14._14 =? 13 &&
		t15._14 =? 13 && t16._14 =? 13 && t17._14 =? 13 && t18._14 =? 13 && t19._14 =? 13 && t20._14 =? 13 && t21._14 =? 13 &&
		t22._14 =? 13 && t23._14 =? 13 && t24._14 =? 13 && t25._14 =? 13
	}

	property("><._15") = {
		t15._15 =? 14 && t16._15 =? 14 && t17._15 =? 14 && t18._15 =? 14 && t19._15 =? 14 && t20._15 =? 14 && t21._15 =? 14 &&
		t22._15 =? 14 && t23._15 =? 14 && t24._15 =? 14 && t25._15 =? 14
	}

	property("><._16") = {
		t16._16 =? 15 && t17._16 =? 15 && t18._16 =? 15 && t19._16 =? 15 && t20._16 =? 15 && t21._16 =? 15 &&
		t22._16 =? 15 && t23._16 =? 15 && t24._16 =? 15 && t25._16 =? 15
	}

	property("><._17") = {
		t17._17 =? 16 && t18._17 =? 16 && t19._17 =? 16 && t20._17 =? 16 && t21._17 =? 16 &&
		t22._17 =? 16 && t23._17 =? 16 && t24._17 =? 16 && t25._17 =? 16
	}

	property("><._18") = {
		t18._18 =? 17 && t19._18 =? 17 && t20._18 =? 17 && t21._18 =? 17 &&
		t22._18 =? 17 && t23._18 =? 17 && t24._18 =? 17 && t25._18 =? 17
	}

	property("><._19") = {
		t19._19 =? 18 && t20._19 =? 18 && t21._19 =? 18 &&
		t22._19 =? 18 && t23._19 =? 18 && t24._19 =? 18 && t25._19 =? 18
	}

	property("><._20") = {
		t20._20 =? 19 && t21._20 =? 19 &&
		t22._20 =? 19 && t23._20 =? 19 && t24._20 =? 19 && t25._20 =? 19
	}

	property("><._21") = {
		t21._21 =? 20 &&
		t22._21 =? 20 && t23._21 =? 20 && t24._21 =? 20 && t25._21 =? 20
	}

	property("><._22") = {
		t22._22 =? 21 && t23._22 =? 21 && t24._22 =? 21 && t25._22 =? 21
	}





	property("><.last") = {
		val i = new Count(-1)
		t1.last =? i.++ && t2.last =? i.++ && t3.last =? i.++ && t4.last =? i.++ && t5.last =? i.++ && t6.last =? i.++ && t7.last =? i.++ &&
		t8.last =? i.++ && t9.last =? i.++ && t10.last =? i.++ && t11.last =? i.++ && t12.last =? i.++ && t13.last =? i.++ && t14.last =? i.++ &&
		t15.last =? i.++ && t16.last =? i.++ && t17.last =? i.++ && t18.last =? i.++ && t19.last =? i.++ && t20.last =? i.++ && t21.last =? i.++ &&
		t22.last =? i.++ && t23.last =? i.++ && t24.last =? i.++ && t25.last =? i.++ && tuptup.last =? '4'
	}

	property("><.head") = {
		t1.head =? 0 && t2.head =? 0 && t3.head =? 0 && t4.head =? 0 && t5.head =? 0 && t6.head =? 0 && t7.head =? 0 &&
		t8.head =? 0 && t9.head =? 0 && t10.head =? 0 && t11.head =? 0 && t12.head =? 0 && t13.head =? 0 && t14.head =? 0 &&
		t15.head =? 0 && t16.head =? 0 && t17.head =? 0 && t18.head =? 0 && t19.head =? 0 && t20.head =? 0 && t21.head =? 0 &&
		t22.head =? 0 && t23.head =? 0 && t24.head =? 0 && t25.head =? 0 && tuptup.head =? 1
	}
	

	property("><.init") = tuptup.init =? 1 >:< "2" >< 3L 
		t1.init =? <> && t2.init =? t1 && t3.init =? t2 && t4.init =? t3 && t5.init =? t4 && t6.init =? t5 && t7.init =? t6 &&
		t8.init =? t7 && t9.init =? t8 && t10.init =? t9 && t11.init =? t10 && t12.init =? t11 && t13.init =? t12 &&
		t14.init =? t13 && t15.init =? t14 && t16.init =? t15 && t17.init =? t16 && t18.init =? t17 && t19.init =? t18 &&
		t20.init =? t19 && t21.init =? t20 && t22.init =? t21 && t23.init =? t22 && t24.init =? t23 && t25.init =? t24

	property("><.tail") = tuptup.tail =? "2" >:< 3L >< '4'  && {
		val r1 = <> >< 1; val r2 = r1 >< 2; val r3 = r2 >< 3; val r4 = r3 >< 4; val r5 = r4 >< 5; val r6 = r5 >< 6
		val r7 = r6 >< 7; val r8 = r7 >< 8; val r9 = r8 >< 9; val r10 = r9 >< 10; val r11 = r10 >< 11; val r12 = r11 >< 12
		val r13 = r12 >< 13; val r14 = r13 >< 14; val r15 = r14 >< 15; val r16 = r15 >< 16; val r17 = r16 >< 17
		val r18 = r17 >< 18; val r19 = r18 >< 19; val r20 = r19 >< 20; val r21 = r20 >< 21; val r22 = r21 >< 22
		val r23 = r22 >< 23; val r24 = r23 >< 24
		
		t1.tail =? <> && t2.tail =? r1 && t3.tail =? r2 && t4.tail =? r3 && t5.tail =? r4 && t6.tail =? r5 && t7.tail =? r6 &&
		t8.tail =? r7 && t9.tail =? r8 && t10.tail =? r9 && t11.tail =? r10 && t12.tail =? r11 && t13.tail =? r12 &&
		t14.tail =? r13 && t15.tail =? r14 && t16.tail =? r15 && t17.tail =? r16 && t18.tail =? r17 && t19.tail =? r18 &&
		t20.tail =? r19 && t21.tail =? r20 && t22.tail =? r21 && t23.tail =? r22 && t24.tail =? r23 && t25.tail =? r24
	}
	
	property("><.dropRight") = {
		import Nat._
		t20.dropRight(_0) =? t20 && t20.dropRight(_1) =? t19 && t20.dropRight(_2) =? t18 && t20.dropRight(_3) =? t17 && t20.dropRight(_4) =? t16 &&
		t20.dropRight(_5) =? t15 && t20.dropRight(_6) =? t14 && t20.dropRight(_7) =? t13 && t20.dropRight(_8) =? t12 && t20.dropRight(_9) =? t11 &&
		t20.dropRight(_10) =? t10 && t20.dropRight(_11) =? t9 && t20.dropRight(_12) =? t8 && t20.dropRight(_13) =? t7 && t20.dropRight(_14) =? t6 &&
		t20.dropRight(_15) =? t5 && t20.dropRight(_16) =? t4 && t20.dropRight(_17) =? t3 && t20.dropRight(_18) =? t2 && t20.dropRight(_19) =? t1 &&
		t20.dropRight(_20) =? t0 &&
		tuptup.dropRight(_0) =? (1 >:< "2" >< 3L >< '4') && tuptup.dropRight(_1) =? (1 >:< "2" >< 3L) &&
		tuptup.dropRight(_2) =? (1 >:< "2") && tuptup.dropRight(_3) =? Tuple(1) && tuptup.dropRight(_4) =? <>
	}

	property("><.takeRight") = {
		import Nat._
		val t = t21; val T = Tuple
		t.takeRight(_0) =? T() && t.takeRight(_1) =? T(20) && t.takeRight(_2) =? T(19, 20) && t.takeRight(_3) =? T(18, 19, 20) &&
		t.takeRight(_4) =? T(17, 18, 19, 20) && t.takeRight(_5) =? T(16, 17, 18, 19, 20) && t.takeRight(_6) =? T(15, 16, 17, 18, 19, 20) &&
		t.takeRight(_7) =? T(14, 15, 16, 17, 18, 19, 20) && t.takeRight(_8) =? T(13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_9) =? T(12, 13, 14, 15, 16, 17, 18, 19, 20) && t.takeRight(_10) =? T(11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_11) =? T(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) && t.takeRight(_12) =? T(9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_13) =? T(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_14) =? T(7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_15) =? T(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_16) =? T(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_17) =? T(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_18) =? T(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_19) =? T(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_20) =? T(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.takeRight(_21) =? T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		tuptup.takeRight(_0) =? <> && tuptup.takeRight(_1) =? Tuple('4') && tuptup.takeRight(_2) =? (3L >:< '4') &&
		tuptup.takeRight(_3) =? ("2" >:< 3L >< '4') && tuptup.takeRight(_4) =? (1 >:< "2" >< 3L >< '4')
	}

	property("><.drop") = {
		import Nat._
		val t = t21; val T = Tuple
		t.drop(_21) =? T() && t.drop(_20) =? T(20) && t.drop(_19) =? T(19, 20) && t.drop(_18) =? T(18, 19, 20) &&
		t.drop(_17) =? T(17, 18, 19, 20) && t.drop(_16) =? T(16, 17, 18, 19, 20) && t.drop(_15) =? T(15, 16, 17, 18, 19, 20) &&
		t.drop(_14) =? T(14, 15, 16, 17, 18, 19, 20) && t.drop(_13) =? T(13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_12) =? T(12, 13, 14, 15, 16, 17, 18, 19, 20) && t.drop(_11) =? T(11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_10) =? T(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) && t.drop(_9) =? T(9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_8) =? T(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_7) =? T(7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_6) =? T(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_5) =? T(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_4) =? T(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_3) =? T(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_2) =? T(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_1) =? T(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		t.drop(_0) =? T(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) &&
		tuptup.drop(_4) =? <> && tuptup.drop(_3) =? Tuple('4') && tuptup.drop(_2) =? (3L >:< '4') &&
		tuptup.drop(_1) =? ("2" >:< 3L >< '4') && tuptup.drop(_0) =? (1 >:< "2" >< 3L >< '4')

	}

	property("><.take") = {
		import Nat._
		t20.take(_20) =? t20 && t20.take(_19) =? t19 && t20.take(_18) =? t18 && t20.take(_17) =? t17 &&
		t20.take(_16) =? t16 && t20.take(_15) =? t15 && t20.take(_14) =? t14 && t20.take(_13) =? t13 &&
		t20.take(_12) =? t12 && t20.take(_11) =? t11 && t20.take(_10) =? t10 && t20.take(_9) =? t9 &&
		t20.take(_8) =? t8 && t20.take(_7) =? t7 && t20.take(_6) =? t6 && t20.take(_5) =? t5 &&
		t20.take(_4) =? t4 && t20.take(_3) =? t3 && t20.take(_2) =? t2 && t20.take(_1) =? t1 &&
		t20.take(_0) =? t0 &&
		tuptup.take(_4) =? (1 >:< "2" >< 3L >< '4') && tuptup.take(_3) =? (1 >:< "2" >< 3L) &&
		tuptup.take(_2) =? (1 >:< "2") && tuptup.take(_1) =? Tuple(1) && tuptup.take(_0) =? <>
	}

	property("><.slice") = {
		import Nat._
		t20.slice(_9, _12) =? Tuple(8, 9, 10) && tuptup.slice(_2, _3) =? Tuple("2") && tuptup.slice(_2, _4) =? Tuple("2", 3L) &&
		tuptup.slice(_2, _5) =? Tuple("2", 3L, '4') && tuptup.slice(_1, _3) =? Tuple(1, "2") &&
		tuptup.slice(_3, _4) =? Tuple(3L) && tuptup.slice(_3, _5) =? Tuple(3L, '4')
	}



	property("><.length") = {
		val lengths = 0 to 25
		all(Seq(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25)
			.zip(lengths).map { case (t, len) => t.length =? len } : _*
		)
	}

	property("><.toList") = {
		val lengths = 0 to 25
		val tuples = Seq(
            t0.toList, t1.toList, t2.toList, t3.toList, t4.toList, t5.toList, t6.toList, t7.toList, t8.toList, t9.toList, t10.toList,
            t11.toList, t12.toList, t13.toList, t14.toList, t15.toList, t16.toList, t17.toList, t18.toList, t19.toList, t20.toList,
            t21.toList, t22.toList, t23.toList, t24.toList, t25.toList
        )
		all(tuples.zip(lengths) map { case (t, len) => t =? lengths.take(len).toList } :_*)
	}

	property("><.toSeq") = {
		val lengths = 0 to 25
		val tuples = Seq(
			t0.toSeq, t1.toSeq, t2.toSeq, t3.toSeq, t4.toSeq, t5.toSeq, t6.toSeq, t7.toSeq, t8.toSeq, t9.toSeq, t10.toSeq,
			t11.toSeq, t12.toSeq, t13.toSeq, t14.toSeq, t15.toSeq, t16.toSeq, t17.toSeq, t18.toSeq, t19.toSeq, t20.toSeq,
			t21.toSeq, t22.toSeq, t23.toSeq, t24.toSeq, t25.toSeq
		)
		all(tuples.zip(lengths) map { case (t, len) => t =? lengths.take(len) } :_*)
	}


}
